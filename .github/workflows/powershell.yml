name: Powershell

on:
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: pwsh

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Restore dependencies
        id: restore-dependencies
        uses: actions/cache/restore@v4
        with:
          path: ~/.local/share/powershell/Modules/
          key: pwsh-module-cache-${{ hashFiles('REPO_NAME.build.ps1') }}
          restore-keys: pwsh-module-cache-

      - name: Install dependencies
        run: Get-ChildItem -File *.build.ps1 | ForEach-Object {& $_ -Bootstrap}

      - name: Save dependencies
        uses: actions/cache/save@v4
        with:
          path: ~/.local/share/powershell/Modules/
          key: ${{ steps.restore-dependencies.outputs.cache-primary-key }}

      - name: Build
        run: Invoke-Build Build

      - name: Test
        run: Invoke-Build Test

  publish:
    if: |
      ${{
        github.event.pull_request.merged &&
        github.event.pull_request.base.ref == 'main' &&
        contains(github.event.issue.labels.*.name, 'release-*')
      }}
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.RELEASE_BOT_GITHUB_TOKEN }}
      PSGalleryApiKey: ${{ secrets.PSGALLERY_API_KEY }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          fetch-tags: true
          token: ${{ secrets.RELEASE_BOT_GITHUB_TOKEN }}

      - name: Restore dependencies
        id: restore-dependencies
        uses: actions/cache/restore@v4
        with:
          path: ~/.local/share/powershell/Modules/
          key: pwsh-module-cache-${{ hashFiles('.build.ps1') }}
          restore-keys: pwsh-module-cache-

      - name: Update version
        run: |
          $Labels = @'
            ${{ toJson(github.event.pull_request.labels.*.name) }}
          '@ | ConvertFrom-Json

          $ReleaseLabel = @($Labels) -match '^release-'
          if ($ReleaseLabel.Count -gt 1)
          {
              "Multiple release labels found: $ReleaseLabel" | Write-Host -ForegroundColor Red
              exit 1
          }

          git config --global user.name "dusty-release-bot"
          git config --global user.email "release-bot@dustyfox.uk"

          Invoke-Build UpdateVersion -ReleaseLabel $ReleaseLabel

      - name: Test
        run: Invoke-Build Build, Test

      - name: Release
        run: Invoke-Build Tag, Push, GithubRelease, Publish
